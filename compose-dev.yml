services:
  db:
    image: postgres
    ports:
      - 5432:5432
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - db_volumes:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3

  redis:
    image: redis
    ports:
      - 6379:6379
    restart: unless-stopped
    volumes:
      - redis_volumes:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5

  elastic_search:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
    volumes:
      - elastic_search_volumes:/usr/share/elasticsearch/data
    environment:
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node
    networks:
      - es-net
    ports:
      - "9300:9300"
      - "9200:9200"
    healthcheck:
      test: curl -s http://elasticsearch01:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50
    restart: unless-stopped

  logstash:
    image: docker.elastic.co/logstash/logstash:8.15.2
    ports:
      - "5000:5000"
    restart: unless-stopped
    depends_on:
      - elastic_search
    networks:
      - es-net

  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.2
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elastic_search:9200
    restart: unless-stopped
    networks:
      - es-net
    depends_on:
      - elastic_search

volumes:
  db_volumes:
  redis_volumes:
  elastic_search_volumes:

networks:
  es-net:
    driver: bridge
